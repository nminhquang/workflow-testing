name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - releases/*
  pull_request:
    branches:
      - develop
      - releases/*

jobs:
  build-and-scan:
    name: Build & Scan Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          
          short_sha=$(echo ${{ github.sha }} | cut -c1-7)
          if [[ ${{ github.ref }} == "refs/heads/develop" ]]; then
            image_tag=develop-$short_sha
          else
            release=$(echo ${{ github.ref }} | cut -d "/" -f4)
            image_tag=${release}-${short_sha}
          fi
          echo "Building docker image ${{ github.repository }}:$image_tag"

      - name: Run Code Scanning (Snyk)
        run: |
          echo "Code scanning"

  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Fetch k8s kubeconfig of dev's cluster
        run: |
          echo "Getting kubeconfig (dev)"

      - name: Deploy to Dev
        run: |
          short_sha=$(echo ${{ github.sha }} | cut -c1-7)
          echo "Deploying to develop-$short_sha to dev env"

  deploy-uat:
    name: Deploy to UAT
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: startsWith(github.ref, 'refs/heads/releases/')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name:  Fetch k8s kubeconfig of UAT's cluster
        run: |
          echo "Getting kubeconfig (uat)"


      - name: Deploy to UAT
        run: |
          short_sha=$(echo ${{ github.sha }} | cut -c1-7)
          release=$(echo ${{ github.ref }} | cut -d "/" -f4)
          echo "Deploying release: ${release}-${short_sha} to uat env"
          echo "Getting environment variables"
          env

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-uat
    environment: PRODUCTION  # Enforces manual approval before proceeding
    if: startsWith(github.ref, 'refs/heads/releases/')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Fetch k8s kubeconfig of PROD's cluster
        run: |
          echo "Getting kubeconfig (PROD)"
          echo "Getting environment variables"
          env

      - name: Deploy to PROD
        run: |
          short_sha=$(echo ${{ github.sha }} | cut -c1-7)
          release=$(echo ${{ github.ref }} | cut -d "/" -f4)
          echo "Deploying release: ${release}-${short_sha} to prod env"
          echo "Getting environment variables"
